#include<FEHLCD.h>
#include<FEHIO.h>
#include<FEHUtility.h>
#include<FEHMotor.h>
#include<FEHServo.h>
#include<FEHUtility.h>

FEHMotor leftMotor (FEHMotor:: Motor0,12.0);
FEHMotor rightMotor (FEHMotor:: Motor1,12.0);

FEHServo topServo (FEHServo:: Servo0);
FEHServo bottomServo (FEHServo:: Servo1);

AnalogInputPin sensor(FEHIO::P1_0);

DigitalInputPin frontLeftBumper(FEHIO:: P2_0);    //Each nonzero value is the int passed to "DriveToWall"
DigitalInputPin frontRightBumper(FEHIO:: P3_0);
DigitalInputPin backLeftBumper(FEHIO:: P1_0);
DigitalInputPin backRightBumper(FEHIO:: P0_0);

DigitalEncoder rightEncoder(FEHIO::P0_0);
DigitalEncoder leftEncoder(FEHIO::P0_1);


#define LEFT 1
#define RIGHT 2
//#define WHEEL_TO_FRONT ??   // For use w/ stationary turns
#define INCH_COUNT 33.741       // # of encoder counts in an inch
#define PI 3.1415926535
#define CLICKED 0



/**
 * For use with an exact needed distance.
 * I.e., move the robot forward 9 inches.
 */
void driveDistance(int distance, int power){

    resetEncoders();
    
    int neededCounts = getCounts(distance);

    LCD.WriteLine("Driving Forward");
    setMotorPowers(power);
    
    while(getCurrentCounts() < neededCounts);
    
    setMotorPowers(0);
    LCD.WriteLine("Stopping");
}

/**
  * Moves the robot forward until two of it's sensors are clicked by the wall
  */
void driveToWall(int power, DigitalInputPin *sensor1, DigitalInputPin *sensor2){
    LCD.WriteLine("Driving to wall")
    leftMotor.SetPercent(power);
    rightMotor.SetPercent(power);
    while((&(sensor1)).Value() !=CLICKED && (&(sensor2)).Value() != CLICKED);
    setMotorPowers(5);
    Sleep(0.5);
    setMotorPowers(0);
    LCD.WriteLine("Contact Made With Both Sensors");
}

/**
  *
  */
void stationaryTurn(float angle, int direction){
  char[6] dir = "Right\0";
  if(direction == LEFT)
      dir = "Left \0"
  LCD.WriteLine("Turning ");
  LCD.WriteLine(angle );
  LCD.WriteLine(" degrees to the "); 
  LCD.WriteLine(dir);
  int rightPower = 30;    int leftPower = -30;
  if(direction == RIGHT){
      rightPower *=-1;  leftPower *=-1;
  }
  rightMotor.SetPercent(rightPower);
  leftMotor.SetPercent(leftPower);
  
  while(getCurrentCounts() < GetTurnCounts(angle));
  setMotorPowers(0);
  Sleep(1.0);
}


// Returns the encoder counts it should take the robot to turn to the specified angle
//Needs to be modified to account for error
int GetTurnCounts(float angle){
    return (int)(318*3.5*angle/(3*PI));
}

//Needs to be modified to account for error
int getCounts(int dist){
    return (int)(INCH_COUNT*dist);
}

//Returns the average of the counts between the two encoders
int getCurrentCounts(){
    return ((rightEncoder.Counts() + leftEncoder.Counts())/2);
}

//Resets the encoder counts
void resetEncoders(){
  rightEncoder.ResetCounts();
  leftEncoder.ResetCounts();
}

void setMotorPowers(int power){
    rightMotor.setPercent(power);
    leftMotor.setPercent(power);
}




//The functions below are all for completing tasks in a sequential order


void WaitForStart(){
    while(sensor.Value() isNotGreen);   //Clearly this needs to change
}

void MovePastSatellite(){

}

void TurnSatellite(){

}

int main(void){
//Let's have some fun

return 0;
}
